//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameContext {

    public GameEntity turnStateEntity { get { return GetGroup(GameMatcher.TurnState).GetSingleEntity(); } }
    public TurnStateComponent turnState { get { return turnStateEntity.turnState; } }
    public bool hasTurnState { get { return turnStateEntity != null; } }

    public GameEntity SetTurnState(TurnState newState) {
        if (hasTurnState) {
            throw new Entitas.EntitasException("Could not set TurnState!\n" + this + " already has an entity with TurnStateComponent!",
                "You should check if the context already has a turnStateEntity before setting it or use context.ReplaceTurnState().");
        }
        var entity = CreateEntity();
        entity.AddTurnState(newState);
        return entity;
    }

    public void ReplaceTurnState(TurnState newState) {
        var entity = turnStateEntity;
        if (entity == null) {
            entity = SetTurnState(newState);
        } else {
            entity.ReplaceTurnState(newState);
        }
    }

    public void RemoveTurnState() {
        turnStateEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public TurnStateComponent turnState { get { return (TurnStateComponent)GetComponent(GameComponentsLookup.TurnState); } }
    public bool hasTurnState { get { return HasComponent(GameComponentsLookup.TurnState); } }

    public void AddTurnState(TurnState newState) {
        var index = GameComponentsLookup.TurnState;
        var component = (TurnStateComponent)CreateComponent(index, typeof(TurnStateComponent));
        component.State = newState;
        AddComponent(index, component);
    }

    public void ReplaceTurnState(TurnState newState) {
        var index = GameComponentsLookup.TurnState;
        var component = (TurnStateComponent)CreateComponent(index, typeof(TurnStateComponent));
        component.State = newState;
        ReplaceComponent(index, component);
    }

    public void RemoveTurnState() {
        RemoveComponent(GameComponentsLookup.TurnState);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherTurnState;

    public static Entitas.IMatcher<GameEntity> TurnState {
        get {
            if (_matcherTurnState == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.TurnState);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherTurnState = matcher;
            }

            return _matcherTurnState;
        }
    }
}
